# Financial Report Project (Financial_Report_PJ)

## Overview

The `Financial_Report_PJ` project is designed to analyze financial transaction data to detect fraud patterns using visualizations. It includes Python scripts to generate static charts (PNG files) and JSON configuration files for creating interactive dashboards in Power BI. The project focuses on the `financial_data.csv` dataset, which contains transaction details such as `Amount`, `TransactionType`, `IsFraud`, and more.

**Key Objectives**:
- Visualize the distribution of transaction amounts (`Amount`) and identify anomalies.
- Analyze transaction types (`TransactionType`) and their association with fraud (`IsFraud`).
- Explore relationships between variables like `Amount` and `TimeSinceLastTransaction`.
- Create a correlation matrix to identify relationships between numeric features.
- Build an interactive Power BI dashboard for dynamic data exploration.

## Project Structure

The project is organized into the following directories:

```
Financial_Report_PJ/
├── python_scripts/
│   ├── app.py
│   ├── amount_distribution.py
│   ├── box_amount_transaction_type.py
│   ├── correlation_heatmap.py
│   ├── scatter_amount_time.py
│   ├── transaction_type_distribution.py
├── data/
│   ├── financial_data.csv
├── output_images/
│   ├── amount_distribution.png
│   ├── box_amount_transaction_type.png
│   ├── correlation_heatmap.png
│   ├── scatter_amount_time.png
│   ├── transaction_type_distribution.png
├── powerbi_configs/
│   ├── box_whisker_chart.json
│   ├── clustered_bar_chart.json
│   ├── clustered_column_chart.json
│   ├── correlation_matrix.json
│   ├── scatter_chart.json
├── README.md
```

### Directory Descriptions
- **python_scripts/**: Contains Python scripts to generate visualizations using `pandas`, `matplotlib`, and `seaborn`.
- **data/**: Stores the input dataset `financial_data.csv`.
- **output_images/**: Stores output PNG files generated by the Python scripts.
- **powerbi_configs/**: Contains JSON files describing Power BI visualizations.
- **README.md**: This file, providing an overview and instructions for the project.

## Dataset

The `financial_data.csv` file contains the following columns:
- **TransactionID**: Unique transaction identifier (string).
- **Timestamp**: Unix timestamp of the transaction (float).
- **Amount**: Transaction amount in USD (float).
- **MerchantID**: Merchant identifier (string).
- **CustomerID**: Customer identifier (string).
- **IsInternational**: Whether the transaction is international (0: No, 1: Yes).
- **TransactionType**: Type of transaction (Purchase, Withdrawal, Transfer).
- **TimeSinceLastTransaction**: Time since the previous transaction in minutes (float).
- **IsFraud**: Fraud indicator (0: No, 1: Yes).

**Note**: The dataset has approximately 10,000 records, with a fraud rate of ~2% (`IsFraud=1`). Transactions with `Amount=0.1` may indicate anomalies.

## Prerequisites

### Python Environment
- **Python**: Version 3.x (tested with 3.10 via Anaconda).
- **Libraries**:
  ```bash
  pip install pandas matplotlib seaborn
  ```
  or, if using Anaconda:
  ```bash
  conda install pandas matplotlib seaborn
  ```

### Power BI
- **Power BI Desktop**: Download from [Microsoft's official website](https://powerbi.microsoft.com/desktop/).
- **Custom Visual**: Install **Box and Whisker by MAQ Software** from Power BI AppSource for `box_whisker_chart.json`.

### File Requirements
- Ensure `financial_data.csv` is placed in the `data/` directory.
- If the dataset is missing, create a sample CSV with the structure described above.

## Installation

1. **Clone or Set Up the Project Directory**:
   - Create the project directory:
     ```bash
     mkdir -p ~/Documents/Python/Financial_Report_PJ
     cd ~/Documents/Python/Financial_Report_PJ
     ```
   - Ensure the directory structure matches the one described above.

2. **Save Python Scripts**:
   - Place the following scripts in `python_scripts/`:
     - `app.py`: Main script to run all visualizations.
     - `amount_distribution.py`: Generates a histogram of `Amount`.
     - `box_amount_transaction_type.py`: Generates a box plot of `Amount` by `TransactionType`.
     - `correlation_heatmap.py`: Generates a correlation heatmap for numeric columns.
     - `scatter_amount_time.py`: Generates a scatter plot of `Amount` vs. `TimeSinceLastTransaction`.
     - `transaction_type_distribution.py`: Generates a bar plot of `TransactionType` by `IsFraud`.
   - These scripts are available in artifacts with the following IDs:
     - `app.py`: 6146b5be-ffec-4374-ab11-600518fd7e84
     - `amount_distribution.py`: 3b349e6a-bd67-4825-9090-af02ec4249cb
     - `box_amount_transaction_type.py`: 876a5257-2590-403f-916f-43baf57a0883
     - `correlation_heatmap.py`: b8a98fcb-34e0-47e3-a4b1-838f2939dc42
     - `scatter_amount_time.py`: ba97113b-3bd6-4e9d-bfe4-d6df25d11cf2
     - `transaction_type_distribution.py`: 8a1d773a-c697-4198-9844-e3eb3ec1afc6

3. **Save Power BI Configurations**:
   - Place the JSON configuration files in `powerbi_configs/`:
     - `box_whisker_chart.json`: Box and Whisker plot.
     - `clustered_bar_chart.json`: Clustered Bar Chart.
     - `clustered_column_chart.json`: Clustered Column Chart.
     - `correlation_matrix.json`: Correlation Matrix.
     - `scatter_chart.json`: Scatter Chart.
   - Artifact IDs:
     - `box_whisker_chart.json`: 1978a557-408d-4443-bbf5-631d3e526409
     - `clustered_bar_chart.json`: afc12907-d823-4117-9beb-5858f6a7bad8
     - `clustered_column_chart.json`: acde7265-8e3f-430d-9cb2-8a198e4ae99c
     - `correlation_matrix.json`: ac026397-9d89-4aed-98f0-a651da962c22
     - `scatter_chart.json`: 91e606b4-a959-413a-946b-d25882198dd6

4. **Create Directories**:
   ```bash
   mkdir -p data output_images powerbi_configs
   ```

## Usage

### Running Python Visualizations
1. **Navigate to the Python Scripts Directory**:
   ```bash
   cd ~/Documents/Python/Financial_Report_PJ/python_scripts
   ```

2. **Run All Visualizations**:
   - Execute `app.py` to generate all PNG files:
     ```bash
     python app.py
     ```
   - This script runs:
     - `amount_distribution.py`: Histogram of `Amount` with log scale, split by `IsFraud`.
     - `box_amount_transaction_type.py`: Box plot of `Amount` by `TransactionType`, split by `IsFraud`.
     - `correlation_heatmap.py`: Heatmap of correlations between numeric columns.
     - `scatter_amount_time.py`: Scatter plot of `Amount` vs. `TimeSinceLastTransaction`, with `IsFraud` as hue and size.
     - `transaction_type_distribution.py`: Bar plot of `TransactionType` counts, split by `IsFraud`.
   - Output PNG files are saved in `output_images/`.

3. **Troubleshooting**:
   - Ensure `financial_data.csv` is in `data/`.
   - Check for Python library installations (`pandas`, `matplotlib`, `seaborn`).
   - If errors occur, verify file contents do not include markdown code fences (```python).

### Creating Power BI Dashboard
1. **Open Power BI Desktop**:
   - Download and install from [Microsoft's website](https://powerbi.microsoft.com/desktop/).

2. **Import Data**:
   - Go to **Get Data** > **Text/CSV**, select `data/financial_data.csv`.
   - Verify column data types:
     - `Amount`, `TimeSinceLastTransaction`: Decimal Number.
     - `IsInternational`, `IsFraud`: Whole Number.
     - `TransactionType`: Text.

3. **Create Additional Columns**:
   - In **Modeling**, create DAX columns:
     ```DAX
     AmountBin = 
     SWITCH(
         TRUE(),
         financial_data[Amount] <= 10, "0-10",
         financial_data[Amount] <= 100, "10-100",
         financial_data[Amount] <= 500, "100-500",
         financial_data[Amount] <= 1000, "500-1000",
         financial_data[Amount] <= 2000, "1000-2000",
         ">2000"
     )

     AmountBinOrder = 
     SWITCH(financial_data[AmountBin], 
         "0-10", 1, 
         "10-100", 2, 
         "100-500", 3, 
         "500-1000", 4, 
         "1000-2000", 5, 
         ">2000", 6
     )

     TransactionTypeOrder = 
     SWITCH(financial_data[TransactionType], 
         "Purchase", 1,